from flask import Flask, request, jsonify
import requests
import os
import json
from datetime import datetime

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BITRIX_IM_DIALOG_ID = os.getenv("BITRIX_IM_DIALOG_ID", "19508")
BITRIX_WEBHOOK_URL = os.getenv("BITRIX_WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://dom.mesopharm.ru/rest/1/abc123xyz/
RENDER_URL = os.getenv("RENDER_URL", "https://bitrix-bot-537z.onrender.com")

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
_bot_state = {"bot_id": None}
_task_to_chat_map = {}
_chat_to_task_map = {}

# ===============================================================
# üîß –£—Ç–∏–ª–∏—Ç–∞: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π BOT_ID
# ===============================================================
def load_bot_id():
    try:
        with open("bot_id.json", "r", encoding="utf-8") as f:
            saved = json.load(f)
            if "bot_id" in saved:
                _bot_state["bot_id"] = int(saved["bot_id"])
                print(f"‚ôªÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π BOT_ID: {_bot_state['bot_id']}")
    except Exception:
        pass

# ===============================================================
# üîß –£—Ç–∏–ª–∏—Ç–∞: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å BOT_ID
# ===============================================================
def save_bot_id(bot_id):
    _bot_state["bot_id"] = int(bot_id)
    try:
        with open("bot_id.json", "w", encoding="utf-8") as f:
            json.dump({"bot_id": _bot_state["bot_id"]}, f)
        print(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω BOT_ID: {_bot_state['bot_id']}")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å bot_id.json:", e)

# ===============================================================
# üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
# ===============================================================
@app.route("/telegram/webhook", methods=["GET", "POST"])
def telegram_webhook():
    if request.method == "GET":
        return jsonify({"ok": True, "message": "Telegram webhook active"})

    update = request.get_json(silent=True) or {}
    message = update.get("message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    text = (message.get("text") or "").strip()

    if not chat_id or not text:
        return jsonify({"ok": True})

    # –ó–∞–≥—Ä—É–∂–∞–µ–º BOT_ID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not _bot_state.get("bot_id"):
        load_bot_id()

    # --- –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ Bitrix IM ---
    payload = {
        "BOT_ID": _bot_state.get("bot_id"),
        "DIALOG_ID": BITRIX_IM_DIALOG_ID,
        "MESSAGE": f"[Telegram {chat_id}] {text}",
    }

    if BITRIX_WEBHOOK_URL:
        try:
            r = requests.post(
                f"{BITRIX_WEBHOOK_URL}/imbot.message.add.json",
                json=payload,
                timeout=10,
            )
            print(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Bitrix ({_bot_state.get('bot_id')}):", r.text)
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Bitrix:", e)

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É Telegram –∏ Bitrix
    _chat_to_task_map[str(chat_id)] = str(BITRIX_IM_DIALOG_ID)
    _task_to_chat_map[str(BITRIX_IM_DIALOG_ID)] = str(chat_id)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Bitrix"},
            timeout=10,
        )
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ Telegram:", e)

    return jsonify({"ok": True})


# ===============================================================
# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –æ—Ç Bitrix (ONIMBOTMESSAGEADD –∏ —Ç.–¥.)
# ===============================================================
@app.route("/bot/events", methods=["POST", "GET"])
def bot_events():
    if request.method == "GET":
        return jsonify({
            "ok": True,
            "message": "bot events endpoint is up",
            "bot_id": _bot_state.get("bot_id")
        })

    body = request.get_json(silent=True) or {}
    if not body:
        try:
            body = request.form.to_dict(flat=False)
            body = {k: (v[0] if isinstance(v, list) else v) for k, v in body.items()}
        except Exception:
            body = {}

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å data, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if isinstance(body.get("data"), str):
        try:
            body["data"] = json.loads(body["data"])
        except Exception:
            pass

    print("\n====== üì• –ü–†–ò–®–õ–û –°–û–û–ë–©–ï–ù–ò–ï –û–¢ BITRIX ======")
    print(json.dumps(body, ensure_ascii=False, indent=2))
    print("===========================================\n")

    event = body.get("event") or body.get("event_name")
    data = body.get("data") or {}

    # üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BOT_ID
    possible_id = (
        data.get("BOT_ID")
        or (data.get("PARAMS") or {}).get("BOT_ID")
        or (data.get("MESSAGE") or {}).get("BOT_ID")
    )
    if possible_id and not _bot_state.get("bot_id"):
        save_bot_id(possible_id)

    # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –∑–Ω–∞–µ–º BOT_ID ‚Äî –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
    if not _bot_state.get("bot_id"):
        load_bot_id()

    # üîÅ –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
    if event == "ONIMBOTMESSAGEADD":
        params = data.get("PARAMS") or data
        dialog_id = params.get("DIALOG_ID") or params.get("CHAT_ID")
        msg = params.get("MESSAGE") or data.get("MESSAGE")
        text = msg.get("TEXT") if isinstance(msg, dict) else str(msg or "")

        chat_id = _task_to_chat_map.get(str(dialog_id))
        if chat_id and TELEGRAM_BOT_TOKEN:
            try:
                r = requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                    json={"chat_id": chat_id, "text": f"[Bitrix] {text}"},
                    timeout=10,
                )
                print(f"üí¨ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ Telegram {chat_id}: {r.status_code}")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ Telegram:", e)

    return jsonify({"ok": True, "bot_id": _bot_state.get("bot_id")})


# ===============================================================
# üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã
# ===============================================================
@app.route("/", methods=["GET"])
def index():
    return f"""
    <h3>‚úÖ Bitrix ‚Üî Telegram Bridge</h3>
    <ul>
        <li><a href="/telegram/webhook">/telegram/webhook</a></li>
        <li><a href="/bot/events">/bot/events</a></li>
        <li><a href="/debug/mappings">/debug/mappings</a></li>
    </ul>
    <p>BOT_ID: {_bot_state.get('bot_id')}</p>
    """


@app.route("/debug/mappings", methods=["GET"])
def debug_mappings():
    return jsonify({
        "task_to_chat": _task_to_chat_map,
        "chat_to_task": _chat_to_task_map,
        "bot_id": _bot_state.get("bot_id")
    })


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
