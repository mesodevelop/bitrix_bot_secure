from flask import Flask, request, redirect, jsonify
import requests
import os
import json
from datetime import datetime

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CLIENT_ID = os.getenv("BITRIX_CLIENT_ID")
CLIENT_SECRET = os.getenv("BITRIX_CLIENT_SECRET")
BITRIX_DOMAIN = os.getenv("BITRIX_DOMAIN", "https://dom.mesopharm.ru")
REDIRECT_URI = os.getenv("BITRIX_OAUTH_REDIRECT_URI", "https://bitrix-bot-537z.onrender.com/oauth/bitrix/callback")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ----------------------
# –õ–æ–≥ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
# ----------------------
@app.before_request
def log_request_info():
    print("\n--- üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now()}")
    print(f"‚û°Ô∏è –ú–µ—Ç–æ–¥: {request.method}")
    print(f"‚û°Ô∏è URL: {request.url}")
    if request.data:
        print(f"‚û°Ô∏è –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {request.data.decode('utf-8', errors='ignore')}")
    print("----------------------\n")


# ----------------------
# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç ‚Äî POST –æ—Ç Bitrix –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
# ----------------------
@app.route("/", methods=["GET", "POST"])
def root():
    if request.method == "POST":
        domain = request.args.get("DOMAIN")
        app_sid = request.args.get("APP_SID")
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–æ–º–µ–Ω–∞: {domain}, APP_SID={app_sid}")
        return "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ POST-–∑–∞–ø—Ä–æ—Å –æ—Ç Bitrix", 200
    return "‚úÖ Bitrix Bot Server —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# ----------------------
# –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ / OAuth-—Ä–µ–¥–∏—Ä–µ–∫—Ç
# ----------------------
@app.route("/install")
def install():
    if not CLIENT_ID:
        return "‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BITRIX_CLIENT_ID –Ω–µ –∑–∞–¥–∞–Ω–∞", 500

    auth_url = (
        f"{BITRIX_DOMAIN}/oauth/authorize/"
        f"?client_id={CLIENT_ID}"
        f"&response_type=code"
        f"&redirect_uri={REDIRECT_URI}"
    )
    print(f"üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {auth_url}")
    return redirect(auth_url)

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
@app.route("/oauth/install")
def oauth_install():
    return install()


# ----------------------
# Callback –ø–æ—Å–ª–µ OAuth
# ----------------------
@app.route("/oauth/bitrix/callback", methods=["GET", "POST"])
def oauth_callback():
    code = request.args.get("code") or request.form.get("code")
    cb_domain = request.args.get("domain")  # dom.mesopharm.ru
    member_id = request.args.get("member_id")

    if not code:
        return "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä code", 400

    data = {
        "grant_type": "authorization_code",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI,
        "code": code,
    }

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ—Ä—Ç–∞–ª–∞
    portal_token_url = f"{BITRIX_DOMAIN}/oauth/token/"
    print(f"üîë –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —É –ø–æ—Ä—Ç–∞–ª–∞: {portal_token_url}")
    try:
        r = requests.post(portal_token_url, data=data, timeout=15)
        print("–û—Ç–≤–µ—Ç –ø–æ—Ä—Ç–∞–ª–∞ (raw):", r.text)
        if r.status_code == 200:
            result = r.json()
        else:
            result = None
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:", e)
        result = None

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if result is None:
        global_token_url = "https://oauth.bitrix.info/oauth/token/"
        print(f"üîÅ –ü–æ—Ä—Ç–∞–ª –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω. –ü—Ä–æ–±—É–µ–º: {global_token_url}")
        try:
            r2 = requests.post(global_token_url, data=data, timeout=15)
            print("–û—Ç–≤–µ—Ç oauth.bitrix.info (raw):", r2.text)
            if r2.status_code != 200:
                return jsonify({
                    "error": "token_exchange_failed",
                    "portal_status": getattr(r, 'status_code', None),
                    "portal_body": getattr(r, 'text', None),
                    "global_status": r2.status_code,
                    "global_body": r2.text,
                }), 502
            result = r2.json()
        except Exception as e:
            return jsonify({
                "error": "both_token_requests_failed",
                "portal_error": str(e),
            }), 502

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–º–µ–Ω/—É—á–∞—Å—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∏
    if cb_domain and not result.get("domain"):
        result["domain"] = f"https://{cb_domain}"
    if member_id and not result.get("member_id"):
        result["member_id"] = member_id

    try:
        with open("token.json", "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# ----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —á—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –≤—ã–∑–æ–≤—ã Bitrix REST
# ----------------------

def load_oauth_tokens():
    try:
        with open("token.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        access_token = data.get("access_token")
        domain = data.get("domain") or BITRIX_DOMAIN
        return access_token, domain, data
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å token.json:", e)
        return None, None, None


def bitrix_call(method: str, payload: dict):
    access_token, domain, _ = load_oauth_tokens()
    if not access_token or not domain:
        return None, {"error": "missing_tokens", "error_description": "–ù–µ—Ç OAuth —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –¥–æ–º–µ–Ω–∞"}
    url = f"{domain}/rest/{method}"
    try:
        r = requests.post(url, params={"auth": access_token}, json=payload, timeout=15)
        r.raise_for_status()
        data = r.json()
        if "error" in data:
            return None, data
        return data.get("result", data), None
    except Exception as e:
        return None, {"error": "request_failed", "error_description": str(e)}


# ----------------------
# –°—Ç–∞—Ç—É—Å OAuth: –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –∏ –∫–∞–∫–æ–π –¥–æ–º–µ–Ω
# ----------------------
@app.route("/oauth/status", methods=["GET"])
def oauth_status():
    access_token, domain, raw = load_oauth_tokens()
    return jsonify({
        "has_access_token": bool(access_token),
        "domain": domain or BITRIX_DOMAIN,
        "token_saved": bool(raw),
        "expires_in": (raw or {}).get("expires_in"),
        "member_id": (raw or {}).get("member_id"),
    })

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–±–∞–≥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
@app.route("/oauth/debug", methods=["GET"])
def oauth_debug():
    return jsonify({
        "bitrix_domain": BITRIX_DOMAIN,
        "redirect_uri": REDIRECT_URI,
        "has_client_id": bool(CLIENT_ID),
        "has_client_secret": bool(CLIENT_SECRET),
    })


# ----------------------
# Telegram webhook: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –≤ Bitrix
# ----------------------
@app.route("/telegram/webhook", methods=["POST"])
def telegram_webhook():
    update = request.get_json(silent=True) or {}
    message = update.get("message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    text = (message.get("text") or "").strip()

    if not chat_id:
        return jsonify({"ok": True})

    title = text or "–û–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ Telegram"
    description = f"–ò—Å—Ç–æ—á–Ω–∏–∫: Telegram chat_id={chat_id}\n\n–¢–µ–∫—Å—Ç: {text}"

    result, err = bitrix_call("tasks.task.add", {
        "fields": {
            "TITLE": title,
            "DESCRIPTION": description,
        }
    })

    if TELEGRAM_BOT_TOKEN:
        reply_text = ""
        if err:
            reply_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {err.get('error_description', err)}"
        else:
            task_id = (result or {}).get("task", {}).get("id") if isinstance(result, dict) else result
            reply_text = f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}"
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json={"chat_id": chat_id, "text": reply_text},
                timeout=10,
            )
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", e)

    return jsonify({"ok": True, "bitrix": result or err})


# ----------------------
# –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø—É—Ç–∏ ‚Äî –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# ----------------------
@app.route("/<path:unknown>", methods=["GET", "POST"])
def catch_all(unknown):
    return f"‚ùå –ü—É—Ç—å '{unknown}' –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º.", 404


# ----------------------
# –ó–∞–ø—É—Å–∫
# ----------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
